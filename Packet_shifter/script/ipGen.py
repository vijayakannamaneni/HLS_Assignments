#############################################################################################
#	Developer : Leo Randal                                               
#	Company   : 5G Testbed IITH
#############################################################################################
#
# Description about this script:
#--------------------------------

#	* This script can generate a TCL script to generate the HLS for the
#	  for the functions mentioned in the below "IP LIBRARY"

#	* Also it executes that TCL script automatically
#############################################################################################

import subprocess
import os
import collections

#############################################################################################
#	IP LIBRARY
#############################################################################################
# These parameters can be changed and used for any functions

key_value_pairs = {
    'DATA_GENERATOR ':{
        'top': 'topFunction_input',
        'clock':10},
    'PACKET SHIFTER ':{
        'top': 'data_packet',
        'clock':10},

        }

func_dict = collections.OrderedDict(sorted(key_value_pairs.items(), key=lambda t: t[0]))
# func_dict = collections.OrderedDict(key_value_pairs)
device_name_list = ['xczu9eg-ffvb1156-2-e', 'xczu28dr-ffvg1517-2-e']

# Change the TCL script file name which is going to be generated by this script, if you want
TCL_FILE_NAME = 'script.tcl'

#############################################################################################
# Function to read inputs from the user and convert it to a list
############################## FUNCTION BEGIN ###############################################

def get_index(len_names):
    list_index = []
    instring = input("Select modules to synthesize: ")
##    print("raw input = {}".format(instring))
    instring = instring.split(',')
##    print("comma separated input = {}".format(instring))
    if(instring[0] == 'all'):
        list_index.extend(range(0,len_names))
    else:
        for i in instring:
            run_range = i.split(':')
            # print(run_range)
            if(len(run_range) == 1):
                list_index.append(int(run_range[0]))
            else:
                if(int(run_range[0]) > int(run_range[1])):
                    print("ERROR: hrange must be greater than lrange")
                else:
                    list_index.extend(range(int(run_range[0]), int(run_range[1]) + 1))
    return list_index

############################## END OF FUNCTION ############################################


################################### MAIN ##################################################

try:  
   os.environ["XILINX_VIVADO"]
except KeyError: 
   print("\nPlease  source settings64.sh before running this file\n")  
   exit() 

device_name = device_name_list[int(input("Select device:\t0 - ZCU102 \t1 - ZCU111 \n"))]
print(device_name)

####################### HELP TEXT #######################

keys_list = list(func_dict)
for x in range(0, len(keys_list)):
    print("{} : {}".format(x, keys_list[x]))
print("\n\
HELP: Example 1: all \n\
      Example 2: 4:7,9,12 \n\
      Example 3: 22")

#################### HELP TEXT ENDS #####################

run_ip_list = get_index(len(func_dict))
run_ip_list = list(set(run_ip_list)) # Get only unique values from the list

# print(run_ip_list)

top_list = []
clock_list = []
name_list = []
dict_values = list(func_dict.values())
for x in run_ip_list:
    top_list.append(dict_values[x]['top'])
    clock_list.append(dict_values[x]['clock'])
    name_list.append(list(func_dict.keys())[x])

# print(top_list)
# print(clock_list)
print(name_list)

################### FILE WRITE BEGINS ###################

fp = open(TCL_FILE_NAME,"w")
fp.write('#!/usr/bin/tclsh \n\n')

fp.write('set displayname {')
for x in name_list:
    fp.write("\"{}\" ".format(x))
fp.write('}\n')

fp.write('set functions \"')
for x in top_list:
    fp.write('{} '.format(x))
fp.write('\"\n')

fp.write('set clocks \"')
for x in clock_list:
    fp.write('{} '.format(x))
fp.write('\"\n')

fp.write('\
cd ../ip\n\
set index 0\n\
foreach funcname $functions {\n\
    open_project -reset $funcname\n\
    puts "\\n Generating function - $funcname \\n"\n\
    set filename "../src/"\n\
    append filename $funcname ".cpp"\n\
    add_files $filename\n\
\n\
    open_solution $funcname\n\
    set_top $funcname\n\
    set_part [lindex $argv 2]\n\
    create_clock -period [lindex $clocks $index] -name default\n\
    config_bind -effort high\n\
    config_schedule -effort medium  -relax_ii_for_timing=0 \n\
    config_compile -name_max_length 100 -no_signed_zeros=0 -pipeline_loops 0 -unsafe_math_optimizations=0\n\
    csynth_design\n\
    #export_design -rtl verilog -format ip_catalog -description "An IP generated by 5G Testbed for NR" -vendor "5g_testbed" -library "NR" -display_name [lindex $displayname $index] -taxonomy "/WN"\n\
    export_design -rtl verilog -format ip_catalog\n\
    close_project\n\
    incr index\n\
}\n\
puts "###################################################################"\n\
puts " All the IPs are generated and available inside ip directory"\n\
puts "###################################################################"\n\
exit ')
fp.close()

############################## END OF FILE WRITE ############################################

# Checks for ip folder in the parent hierarchy and creates a new one, if it doesn't exists
if(not os.path.isdir('../ip')):
    os.mkdir('../ip')

# Executes the generated TCL script
print("\n\nrun vivado_hls -f  {} {} if the script fails due to an ERROR\n\n".format(TCL_FILE_NAME,device_name))

args = ["vivado_hls", "-f", TCL_FILE_NAME]
args.append(device_name)
subprocess.run(args)

print("\n\n###################################################################")
print(" Move the ip folder to desired location before committing to git")
print("###################################################################\n")

#############################################################################################
